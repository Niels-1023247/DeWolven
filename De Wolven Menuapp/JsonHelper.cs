// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using De_Wolven_Menuapp;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace De_Wolven_Menuapp
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Welcome
    {
        [J("Menukaart")] public Menukaart Menukaart { get; set; }
    }

    public partial class Menukaart
    {
        [J("Gerechten")] public List<Gerechten> Gerechten { get; set; }
        [J("Dranken")] public List<Dranken> Dranken { get; set; }
        [J("Desserts")] public List<Dessert> Desserts { get; set; }
    }

    public partial class Dessert
    {
        [J("DessertNaam")] public string DessertNaam { get; set; }
        [J("Prijs")] public string Prijs { get; set; }
        [J("Allergenen")] public string Allergenen { get; set; }
    }

    public partial class Dranken
    {
        [J("DrankNaam")] public string DrankNaam { get; set; }
        [J("Prijs")] public string Prijs { get; set; }
        [J("Allergenen")] public string Allergenen { get; set; }
    }

    public partial class Gerechten
    {
        [J("GerechtNaam")] public string GerechtNaam { get; set; }
        [J("Prijs")] public string Prijs { get; set; }
        [J("Allergenen")] public string Allergenen { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json)
        {
            return JsonConvert.DeserializeObject<Welcome>(json, De_Wolven_Menuapp.Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self)
        {
            return JsonConvert.SerializeObject(self, De_Wolven_Menuapp.Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
